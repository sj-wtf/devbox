function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _path = require('path');

var path = _interopRequireWildcard(_path);

'use babel';

var goodPath = path.join(__dirname, 'fixtures', 'good.py');
var badPath = path.join(__dirname, 'fixtures', 'bad.py');
var errwarnPath = path.join(__dirname, 'fixtures', 'errwarn.py');
var fixturePath = path.join(__dirname, 'fixtures');

describe('The flake8 provider for Linter', function () {
  var lint = require('../lib/main.coffee').provideLinter().lint;

  beforeEach(function () {
    waitsForPromise(function () {
      return Promise.all([atom.packages.activatePackage('linter-flake8'), atom.packages.activatePackage('language-python').then(function () {
        return atom.workspace.open(goodPath);
      })]);
    });
  });

  it('should be in the packages list', function () {
    return expect(atom.packages.isPackageLoaded('linter-flake8')).toBe(true);
  });

  it('should be an active package', function () {
    return expect(atom.packages.isPackageActive('linter-flake8')).toBe(true);
  });

  describe('checks bad.py and', function () {
    var editor = null;
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(badPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds at least one message', function () {
      return waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          return expect(messages.length).toBeGreaterThan(0);
        });
      });
    });

    it('verifies that message', function () {
      return waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBeDefined();
          expect(messages[0].type).toEqual('Warning');
          expect(messages[0].html).not.toBeDefined();
          expect(messages[0].text).toBeDefined();
          expect(messages[0].text).toEqual('F821 â€” undefined name \'asfd\'');
          expect(messages[0].filePath).toBeDefined();
          expect(messages[0].filePath).toMatch(/.+spec[\\\/]fixtures[\\\/]bad\.py$/);
          expect(messages[0].range).toBeDefined();
          expect(messages[0].range.length).toEqual(2);
          expect(messages[0].range).toEqual([[0, 0], [0, 4]]);
        });
      });
    });

    it('checks that the message is an error if flakeErrors is set', function () {
      atom.config.set('linter-flake8.flakeErrors', true);
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBeDefined();
          expect(messages[0].type).toEqual('Error');
        });
      });
    });
  });

  describe('checks errwarn.py and', function () {
    var editor = null;

    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(errwarnPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds at least one message', function () {
      return waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          return expect(messages.length).toBeGreaterThan(0);
        });
      });
    });

    it('finds the message is a warning if pep8ErrorsToWarnings is set', function () {
      atom.config.set('linter-flake8.pep8ErrorsToWarnings', true);
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBeDefined();
          expect(messages[0].type).toEqual('Warning');
        });
      });
    });

    it('finds the message is an error if pep8ErrorsToWarnings is set', function () {
      atom.config.set('linter-flake8.pep8ErrorsToWarnings', false);
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBeDefined();
          expect(messages[0].type).toEqual('Error');
        });
      });
    });
  });

  it('finds nothing wrong with a valid file', function () {
    waitsForPromise(function () {
      return atom.workspace.open(goodPath).then(function (editor) {
        return lint(editor).then(function (messages) {
          return expect(messages.length).toEqual(0);
        });
      });
    });
  });

  describe('executable path', function () {
    var helpers = require('atom-linter');
    var editor = null;
    var realExec = helpers.exec;
    var execParams = [];
    function fakeExec() {
      for (var _len = arguments.length, parameters = Array(_len), _key = 0; _key < _len; _key++) {
        parameters[_key] = arguments[_key];
      }

      execParams.push(parameters);
      return Promise.resolve('');
    }

    beforeEach(function () {
      atom.project.addPath(fixturePath);

      Object.defineProperty(helpers, 'exec', {
        enumerable: true,
        value: fakeExec
      });

      waitsForPromise(function () {
        return atom.workspace.open(badPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    afterEach(function () {
      Object.defineProperty(helpers, 'exec', {
        enumerable: true,
        value: realExec
      });
    });

    it('finds executable relative to project', function () {
      waitsForPromise(function () {
        atom.config.set('linter-flake8.executablePath', path.join('$PROJECT', 'flake8'));
        return lint(editor).then(function () {
          expect(execParams.pop()[0]).toEqual(path.join(fixturePath, 'flake8'));
        });
      });
    });

    it('finds executable using project name', function () {
      waitsForPromise(function () {
        atom.config.set('linter-flake8.executablePath', path.join('$PROJECT_NAME', 'flake8'));
        return lint(editor).then(function () {
          expect(execParams.pop()[0]).toEqual(path.join('fixtures', 'flake8'));
        });
      });
    });

    it('normalizes executable path', function () {
      waitsForPromise(function () {
        atom.config.set('linter-flake8.executablePath', path.join(fixturePath, '..', 'fixtures', 'flake8'));
        return lint(editor).then(function () {
          expect(execParams.pop()[0]).toEqual(path.join(fixturePath, 'flake8'));
        });
      });
    });

    it('finds backup executable', function () {
      waitsForPromise(function () {
        var flakeNotFound = path.join('$PROJECT', 'flake8_notfound');
        var flakeBackup = path.join(fixturePath, 'flake8_backup');
        atom.config.set('linter-flake8.executablePath', flakeNotFound + ';' + flakeBackup);
        return lint(editor).then(function () {
          expect(execParams.pop()[0]).toEqual(path.join(fixturePath, 'flake8_backup'));
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/stjohnson/repositories/dotfiles/atom/packages/linter-flake8/spec/linter-flake8-spec.js
